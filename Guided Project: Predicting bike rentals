#Import, Plot and Calculating the Correlations
import pandas as pd
import matplotlib.pyplot as plt
%matplotlib inline

bike_rentals = pd.read_csv('bike_rental_hour.csv')
print(bike_rentals.head())
plt.hist(bike_rentals['cnt'])
bike_rentals.corr()['cnt']

#Calculating Features
def assign_label(hr):
    if hr in range(6,13):
        return 1
    elif hr in range(13,19):
        return 2
    elif hr in range(19,25):
        return 3
    else:
        return 4

bike_rentals['time_label'] = bike_rentals['hr'].apply(assign_label)

#Train/Test Split
import sklearn
from sklearn.metrics import mean_squared_error

train = bike_rentals.sample(frac = .8)
train_index = bike_rentals.index.isin(train.index)
test = bike_rentals.loc[~train_index]

#Apply Linear Regression
from sklearn.linear_model import LinearRegression
cols = list(bike_rentals.columns)
cols.remove('cnt')
cols.remove('casual')
cols.remove('dteday')
cols.remove('registered')

lr = LinearRegression()
lr.fit(train[cols],train['cnt'])
predictions = lr.predict(test[cols])
mse = mean_squared_error(predictions, test['cnt'])
mse

#Applying Decision Trees
from sklearn.tree import DecisionTreeRegressor
clf = DecisionTreeRegressor()
clf.fit(train[cols],train['cnt'])
predictions = clf.predict(test[cols])
mse2 = mean_squared_error(predictions, test['cnt'])

clf2 = DecisionTreeRegressor(max_depth = 5)
clf2.fit(train[cols],train['cnt'])
predictions = clf2.predict(test[cols])
mse3 = mean_squared_error(predictions, test['cnt'])

clf3 = DecisionTreeRegressor(min_samples_leaf = 5)
clf3.fit(train[cols],train['cnt'])
predictions = clf3.predict(test[cols])
mse4 = mean_squared_error(predictions, test['cnt'])

print(mse2,mse3,mse4)

#Applying Random Forest
from sklearn.ensemble import RandomForestRegressor
rf1 = RandomForestRegressor()
rf1.fit(train[cols], train['cnt'])
predictions = rf1.predict(test[cols])
mse_rf1 = mean_squared_error(test['cnt'], predictions)

rf2 = RandomForestRegressor(n_estimators = 5)
rf2.fit(train[cols], train['cnt'])
predictions = rf2.predict(test[cols])
mse_rf2 = mean_squared_error(test['cnt'], predictions)

rf3 = RandomForestRegressor(n_estimators = 5, max_depth = 5)
rf3.fit(train[cols], train['cnt'])
predictions = rf3.predict(test[cols])
mse_rf3 = mean_squared_error(test['cnt'], predictions)

rf4 = RandomForestRegressor(n_estimators = 5, min_samples_leaf = 2)
rf4.fit(train[cols], train['cnt'])
predictions = rf4.predict(test[cols])
mse_rf4 = mean_squared_error(test['cnt'], predictions)

print(mse_rf1, mse_rf2, mse_rf3, mse_rf4)
